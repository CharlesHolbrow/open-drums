export declare function clamp(min: number, max: number, v: number): number;
export declare function dbToGain(db: number): number;
export declare function gainToDb(gain: number): number;
/**
 * Convert a string or number to a number of whole notes.
 * @param {String|Number} value - input value can be 'quarter' or '1/4' or 0.25
 * @returns {Number} - A duration in whole notes
 */
export declare const valueToWholeNotes: (value: string | number) => any;
export declare const valueToMidiNoteNumber: (value: number | string) => any;
/**
 * Convert a midi note number to fundamental frequency in hz. Equal temperment.
 * @param midiNoteNumber
 * @returns fundamental frequency in hz
 */
export declare const m2f: (midiNote: number) => number;
/**
 * Convert a frequency to a midi note number, assuming 69=A5=440hz.
 * The output is not rounded to an integer, so use Math.round on the output if
 * you need an integer note number.
 * @param hz frequency in hz
 * @returns midi note number
 */
export declare const f2m: (hz: number) => number;
export declare const numberToMidiNote: (note: number) => {
    type: string;
    note: number;
};
export declare function midiVelocityToDbfs(v: number, min?: number, max?: number): number;
export declare function velocityNumberToDynamic(velocity: number): {
    v: number;
    dbfs: number;
    intensity: number;
};
