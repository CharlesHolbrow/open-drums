export = pluginTStereoDelay;
/**
 * This is a helper class for Tracktion's #TStereoDelay VST2 plugin, which is
 * available on Mac, Windows, and Linux. The #T series of plugins are part of
 * Tracktion Waveform's "Daw Essentials" package:
 * https://www.tracktion.com/products/daw-essentials-collection
 * The "Daw Essentials" package comes bundled with OEM, Standard, and Extreme
 * versions of Waveform (but unfortunately, not the "Basic" bundle).
 *
 * Internal Plugins like "volume", "insert", "auxsend", and "auxreturn" work
 * with `fluid.plugin.setParamExplicit` AND `fluid.plugin.setParamNormalized`.
 * However, for Tracktion's VSTs (and possibly all VSTs) `setParamExlicit`
 * behaves the same as `setParamNormalized`. This helper enables #TStereoDelay
 * configuration using useful units like dBFS and milliseconds instead of
 * normalized 0-1 values.
 *
 * To use any method in this module other than `select`, make sure that a
 * `#TStereo Delay` plugin instance is selected by first calling
 * `pluginTStereoDelay.select()`.
 *
 * `#TStereo Delay` has several wet/dry controls:
 * - "Wet" - This is the value that appears in the UI
 * - "Wet Level" - Extra control that appears only in tracktion's bottom bar
 * - "Dry"
 * - "Dry Level"
 *
 * This module uses "Wet" and "Dry", because it makes it easier to understand
 * from when the plugin is viewed in a GUI.
 *
 * The `#TStereo Delay` has some limited tempo sync abilities. When sync is
 * enabled, the following VST parameters control the delay time:
 * - "L Note Delay"
 * - "L Note Offset"
 * - "R Note Delay"
 * - "R Note Offset"
 *
 * When sync is disabled, the following params control the delay time:
 * - "L Delay"
 * - "R Delay"
 */
declare const pluginTStereoDelay: {
    type: string;
    name: string;
    /**
     * Select a `#TStereo Delay` vst2 plugin on the selected track, creating a new
     * plugin instance if needed
     * @param {number} [pluginId] - optional index of the plugin to select
     */
    select(pluginId?: number | undefined): {
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
        address: string;
    };
    /**
     * Zero the selected `#TStereo Delay` plugin, resetting to sensible defaults.
     */
    zero(): ({
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    } | {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    }[])[];
    /**
     * @param {number} delayMs delay time in milliseconds
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    whole  notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setDelayLeftMs(delayMs: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * @param {number} delayMs delay time in milliseconds
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    whole  notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setDelayRightMs(delayMs: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * Set Delay time for both left and right channels
     * @param {number} delayMs delay time in milliseconds
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    whole  notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setDelayMs(delayMs: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    }[];
    /**
     * Set the Wet signal level
     * @param {number} db Wet signal level in DBFS (0 = unity gain)
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    whole  notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setWetDbfs(db: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * Set the Dry signal level
     * @param {number} db Dry signal level in DBFS (0 = unity gain)
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    whole  notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setDryDbfs(db: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * If the left channel has non-zero feedback, pan it accross the left/right
     * inputs.
     * @param {number} pan 0=center -1=left 1=right
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    whole  notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setCrossfeedLeft(pan: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * If the right channel has non-zero feedback, pan it accross the left/right
     * inputs.
     * @param {number} pan 0=center -1=left 1=right
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    whole  notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setCrossfeedRight(pan: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * Set the feedback amount from the left delay back into the plugin input.
     * @param {number} amt Left feedback amount. 0=none 1=100% -1=100%(inverted)
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    whole  notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setFeedbackLeft(amt: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * Set the feedback amount from the right delay back into the plugin input.
     * @param {number} amt Right feedback amount. 0=none 1=100% -1=100%(inverted)
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    whole  notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setFeedbackRight(amt: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * Set the feedback amount from both left and rights delays.
     * @param {number} amt Right feedback amount. 0=none 1=100% -1=100%(inverted)
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    whole  notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setFeedback(amt: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    }[];
    /**
     * #TStereo Delay has a 'Sync' feature, which is not currently well supported
     * by this fluid module. I recommend disabling it. If you want to use the sync
     * feature, you must use the `fluid.plugin.setParam` methods.
     *
     * Note that Waveform's sync feature does not follow tempo automation, so it
     * is probably best to just calculate tempos in milliseconds and specify them
     * using the `fluid.pluginTStereoDelay.setDelayMs` helpers.
     */
    disableSync(): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * Pan the right delay channel.
     * @param {number} amt Right channel pan amount. 0=Center 1=Right -1=Left
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    whole  notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setPanRight(amt: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * Pan the left delay channel.
     * @param {number} amt Left channel pan amount. 0=Center 1=Right -1=Left
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    whole  notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setPanLeft(amt: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * Pan to the center, specifying the width
     * @param {number} width Stereo width. 0=mono 1=Stereo -1=InvertStereo
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    whole  notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setPanWidth(amt: any, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    }[];
    /**
     * Set low pass cutoff frequency on the left channel of the delay
     * @param {number} freq frequency between 20 and 20000
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    whole  notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setLowPassFreqLeft(freq: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * Set low pass cutoff frequency on the right channel of the delay
     * @param {number} freq frequency between 20 and 20000
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    whole  notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setLowPassFreqRight(freq: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * Set low pass cutoff frequency on both channel of the delay
     * @param {number} freq frequency between 20 and 20000
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    whole  notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setLowPassFreq(freq: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    }[];
};
