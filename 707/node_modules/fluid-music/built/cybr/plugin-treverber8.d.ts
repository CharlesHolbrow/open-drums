export = pluginTReverber8;
declare const pluginTReverber8: {
    type: string;
    name: string;
    /**
     * Select a `#TReverber8` vst plugin on the selected track, creating a new
     * plugin instance if needed
     * @param {number} [pluginId] - optional index of the plugin to select
     */
    select(pluginId?: number | undefined): {
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
        address: string;
    };
    zero(): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    }[];
    /**
     * @param {number} value a number between -40 to 0 to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setDryLevelDbfs(value: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * @param {number} value a number between -40 to 0 to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setWetLevelDbfs(value: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * @param {boolean} value a boolean to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setEnable(value: boolean, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * Removes frequencies set with Bandwidth in the feedback stage of the
     * reverb meaning that these frequencies are dampened over time.
     *
     * @param {number} value a number between 100-18500 to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setDampingHz(value: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * Controls the initial density of the reverb. Lower values result in audible
     * early reflections while higher values produce a dense reverb start.
     *
     * @param {number} value a number between 0.1-0.8 to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setDensity(value: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * Sets the frequency range for the Damping parameter.
     *
     * @param {number} value a number between 100-18500 to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setBandwidthHz(value: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * Sets the time the reverb needs to decay.
     * @param {number} value a number between 0-0.8 to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setDecay(value: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * Sets the delay before the signal enters the reverb stage. Typically you
     * set it to around a hundredth to a tenth of the reverb Decay. Predelay
     * strongly affects the perceived size of the reverb effect since it controls
     * the time until the first reflection is generated.
     *
     * @param {number} value a number between 0-200 to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setPredelayMs(value: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * Sets the length of the room size. Lower settings simulate a small room
     * while higher settings simulate a big hall or church.
     *
     * @param {number} value a number between 0-100 to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setSizePercent(value: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * @param {number} value a number between -45 and 0 to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setGainDbfs(value: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * Adjusts the relation between the dry signal at the full left to the wet
     * effect signal at the full right. When using #TReverber8 as send effect,
     * we recommend to set Mix to fully wet (100%).
     *
     * @param {number} value a number between 0-100 to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setMixPercent(value: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * @param {number} value a number between 0-100 to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setEarlyLateMixPercent(value: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    params: {
        dryLevel: string;
        wetLevel: string;
        enable: string;
        damping: string;
        density: string;
        bandwidth: string;
        decay: string;
        predelay: string;
        size: string;
        gain: string;
        mix: string;
        earlyLateMix: string;
    };
};
