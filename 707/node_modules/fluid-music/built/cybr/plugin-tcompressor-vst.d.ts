export = pluginTCompressor;
/**
 * This is a helper class for Tracktion's #TCompressor VST2 plugin, which is
 * available on Mac, Windows, and Linux. The #T series of plugins are part of
 * Tracktion Waveform's "Daw Essentials" package:
 * https://www.tracktion.com/products/daw-essentials-collection
 * The "Daw Essentials" package comes bundled with OEM, Standard, and Extreme
 * versions of Waveform (but unfortunately, not the "Basic" bundle).
 *
 * Internal Plugins like "volume", "insert", "auxsend", and "auxreturn" work
 * with `fluid.plugin.setParamExplicit` AND `fluid.plugin.setParamNormalized`.
 * However, for Tracktion's VSTs (and possibly all VSTs) `setParamExlicit`
 * behaves the same as `setParamNormalized`. This helper enables #TCompressor
 * configuration using useful units like dBFS and milliseconds instead of
 * normalized 0-1 values.
 *
 * To use any method in this module other than `select`, make sure that a
 * `#TCompressor` plugin instance is selected by first calling
 * `pluginTCompressor.select()`.
 */
declare const pluginTCompressor: {
    type: string;
    name: string;
    /**
     * Select a `#TCompressor` vst plugin on the selected track, creating a new
     * plugin instance if needed
     * @param {number} [pluginId] - optional index of the plugin to select
     */
    select(pluginId?: number | undefined): {
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
        address: string;
    };
    /**
     * Zero the selected `#TStereo Delay` plugin, resetting to sensible defaults.
     */
    zero(): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    }[];
    /**
     * @param {number} db Wet signal level in DBFS (0 = unity gain)
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setDryLevelDbfs(db: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * @param {number} db Wet signal level in DBFS (0 = unity gain)
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setWetLevelDbfs(db: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * @param {boolean} value a boolean to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setEnable(value: boolean, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * @param {boolean} value a boolean to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setMode(value: boolean, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * @param {number} db threshold value from -60 to 0 in DBFS
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setThresholdDbfs(db: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * @param {number} value a number between 1-100 to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setRatio(value: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * @param {number} value a number between 0.1-100 to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setAttackMs(value: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * @param {number} value a number between 0-1000 to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setHoldMs(value: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * @param {number} value a number between 1-1000 to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setReleaseMs(value: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * @param {number} value a number between -20 to 20 to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setInputDbfs(value: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * @param {number} value a number between -20 to 20 to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setMakeUpDbfs(value: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * @param {number} value a number between 0-60 to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setSoftKneeDbfs(value: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * @param {number} value a number between 0 to 10 to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setLookaheadMs(value: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * @param {boolean} value a boolean to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setLimit(value: boolean, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * @param {boolean} value a boolean to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setUseSidechainTrigger(value: boolean, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * @param {boolean} value a boolean to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setMonitorSidechain(value: boolean, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * @param {boolean} value a boolean to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setSoftClip(value: boolean, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * @param {number} db a number between -60 to 0 to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setSoftClipThresholdDbfs(db: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * @param {boolean} value a boolean to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setPeakDetection(value: boolean, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * @param {boolean} value a boolean to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setUseSumDetection(value: boolean, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * @param {boolean} value a boolean to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setAuto(value: boolean, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * @param {boolean} value a boolean to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setFilter(value: boolean, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * @param {number} value an integer between 0-7 to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setType(value: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * @param {number} value a number between 10-20000 to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setFreqHz(hz: any, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * @param {number} value a number between 0.025-40 to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setQ(value: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    /**
     * @param {number} value a number between -30 to 30 to set the parameter to
     * @param {number} [timeInWholeNotes] time to insert automation point in
     *    quarter notes. If no time is supplied, set the initial value
     * @param {number} [curve=0] A number from [-1, 1] (inclusive), which
     *    represents the curvature of the line formed by this point and the next
     *    point. Zero implies a linear change. Higher values create a curve that
     *    begins slowly and accelerates. Lower values create a curve that begins
     *    quickly, and decelerates.
     */
    setGainDbfs(value: number, timeInWholeNotes?: number | undefined, curve?: number | undefined): {
        address: string;
        args: ({
            type: string;
            value: string;
        } | {
            type: string;
            value: number;
        })[];
    };
    params: {
        DryLevel: string;
        WetLevel: string;
        Enable: string;
        Mode: string;
        Threshold: string;
        Ratio: string;
        Attack: string;
        Hold: string;
        Release: string;
        Input: string;
        MakeUp: string;
        SoftKnee: string;
        Lookahead: string;
        Limit: string;
        UseSidechainTrigger: string;
        MonitorSidechain: string;
        SoftClip: string;
        "Threshold(2)": string;
        PeakDetection: string;
        UseSumDetection: string;
        Auto: string;
        Filter: string;
        Type: string;
        Freq: string;
        Q: string;
        Gain: string;
    };
};
