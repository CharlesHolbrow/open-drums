/// <reference types="node" />
export = FluidOscSender;
declare class FluidOscSender {
    constructor(targetPort: any);
    targetPort: any;
    pendingMsgCount: number;
    client: import("dgram").Socket;
    /**
     * Send an osc message or bundle.
     * @param {object|object[]|Buffer} msgObject - The osc message to be sent.
     *        If the type is:
     *          - object - parse it with the osc-min npm module
     *          - object[] - parse as a bundle. each object is an osc-min message
     *          - Buffer - send the raw buffer
     *        Expects objects to be in the npm osc-min format, which look like:
     *        {
     *          address: '/some/address',
     *          args: [
     *            { type: 'string', value: 'hi there' },
     *            { type: 'integer', value: 100 },
     *            { type: 'float', value: 3.14159 },
     *          ]
     *        }
     * @param {number} [timetag = 0] - timetag is only used if first argument is
     *        array.
     */
    send(msgObject: object | object[] | Buffer, timetag?: number | undefined): void;
}
