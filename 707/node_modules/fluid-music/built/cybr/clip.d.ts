/**
 * Render the selected clip (audio or midi) to an audio file.
 * @param {string} filename output file name
 * @param {number} [tailInSeconds] optionally render addition reverb tail
 */
export declare function render(filename: any, tailInSeconds: any): {
    address: string;
    args: any[];
};
/**
 * Select a clip on the currently selected track.
 * @param {string} clipName
 */
export declare function select(clipName: any): {
    address: string;
    args: {
        type: string;
        value: string;
    }[];
};
/**
 * Change the length of the clip.
 * @param {number} durationInWholeNotes new length of the clip
 * @param {boolean} [trimStart=false] if true, trim the beginning of the clip,
 *    effectively changing the start time
 */
export declare function length(durationInWholeNotes: any, trimStart?: boolean): {
    address: string;
    args: ({
        type: string;
        value: number;
    } | {
        type: string;
        value: string;
    })[];
};
/**
 * Trim the clip. positive number will make the clip shorter from both the
 * beginning and the end. Unlike many methods, this operates with seconds
 * as the time unit instead of whole notes (or quarter notes).
 * @param {number} [secondsToStart=0]
 * @param {number} [secondsFromEnd=0]
 */
export declare function trimSeconds(secondsToStart?: number, secondsFromEnd?: number): {
    address: string;
    args: {
        type: string;
        value: number;
    }[];
};
/**
 * Update the source start time. This does not affect time that the clip is
 * positioned within the session.
 * @param {number} startAtSeconds Time in the source to start the clip
 */
export declare function setSourceOffsetSeconds(startAtSeconds: any): {
    address: string;
    args: {
        type: string;
        value: number;
    }[];
};
