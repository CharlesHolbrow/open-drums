/**
 * Select an audio track by name
 * @param {string} trackName
 */
export declare function select(trackName: string, parent?: string): {
    address: string;
    args: {
        type: string;
        value: string;
    }[];
};
/**
 * Insert and select an audio file clip into the selected audio track. Noop
 * when there is no selected track.
 * @param {string} clipName name the new clip
 * @param {number} startTimeInWholeNotes clip start time in quarter notes
 * @param {string} fileName
 */
export declare function insertWav(clipName: string, startTimeInWholeNotes: number, fileName: string): {
    address: string;
    args: ({
        type: string;
        value: string;
    } | {
        type: string;
        value: number;
    })[];
};
/**
 * Selects a track, ensuring that it has a bus return. Afterwords, other
 * tracks can add sends that target the track selected with this method.
 *
 * Use the audiotrack.send method to send from other tracks to a return.
 *
 * @param {string} busName - name of audiotrack (the return will be named
 *                           after the audio track).
 */
export declare function selectReturnTrack(busName: string): {
    address: string;
    args: {
        type: string;
        value: string;
    }[];
};
export declare function selectSubmixTrack(name: string, parent?: string): {
    address: string;
    args: {
        type: string;
        value: string;
    }[];
};
/**
 * Adjust the send level to the specified bus, adding the send (post-gain) if
 * it does not yet exist. Use with audiotrack.selectReturnTrack(busName).
 * @param {string} busName The name of the return bus to send to
 * @param {number} [levelDb=0] default on the server is 0
 */
export declare function send(busName: string, levelDb?: number): {
    address: string;
    args: any[];
};
/**
 * Mute or unmute the selected audio track.
 * @param {boolean} [mute=true] true if track should be muted. false = unmute.
 */
export declare function mute(mute?: boolean): {
    address: string;
};
/**
 * Unmute the selected audio track.
 */
export declare function unmute(): {
    address: string;
};
/**
 * Adjust the track gain or add a gain automation point.
 *
 * When adjusting gain, set the gain of the the last volume plugin on the
 * track's PluginList. When adding volume automation, adjust the second last
 * volume parameter, creating it if needed.
 * @param {number} dbfs
 * @param startTimeInWholeNotes When present, insert an automation point instead
 *    of setting the parameter directly
 * @param curve (default) 0=linear, -1=startFast, 1=startSlow
 */
export declare function gain(dbfs: number, startTimeInWholeNotes?: number, curve?: number): {
    address: string;
    args: {
        type: string;
        value: number;
    }[];
};
/**
 * Set the pan, or add a pan automation point
 * @param bipolar stereo pan position -1=hardLeft, 1=hardRight
 * @param startTimeInWholeNotes When present, insert an automation point instead
 *    of setting the parameter directly
 * @param curve (default) 0=linear, -1=startFast, 1=startSlow
 */
export declare function pan(bipolar: number, startTimeInWholeNotes?: number, curve?: number): {
    address: string;
    args: {
        type: string;
        value: number;
    }[];
};
/**
 * Set the track width, or add a width automation point
 * @param bipolar 1=default, 0=mono, -1=stereoInvert
 * @param startTimeInWholeNotes When present, insert an automation point instead
 *    of setting the parameter directly
 * @param curve (default) 0=linear, -1=startFast, 1=startSlow
 */
export declare function width(bipolar: number, startTimeInWholeNotes?: number, curve?: number): {
    address: string;
    args: {
        type: string;
        value: number;
    }[];
};
/**
 * Render a region of the track to an audio file. If no time range is
 * supplied, the engine should use the loop time range.
 *
 * @param {string} outFilename output filename
 * @param {number} [startTimeInWholeNotes] start time in whole notes
 * @param {number} [durationInWholeNotes] duration in whole notes
 */
export declare function renderRegion(outFilename: any, startTimeInWholeNotes: any, durationInWholeNotes: any): {
    args: any[];
    address: string;
};
/**
 * Remove all clips (ex. audio, midi clips) from the selected audio track.
 */
export declare function removeClips(): {
    address: string;
};
/**
 * Remove all automation from the track and from all the tracks plugins.
 */
export declare function removeAutomation(): {
    address: string;
};
