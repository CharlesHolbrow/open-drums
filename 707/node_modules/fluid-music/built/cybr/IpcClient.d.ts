/// <reference types="node" />
declare const OscIpcClient: any;
interface IpcClientOptions {
    /** default = 9999 */
    targetPort?: number;
    /** default = 127.0.0.1 */
    targetHost?: string;
    /** default = 3000 (in milliseconds) */
    timeout?: number;
    /** default = false */
    isUnixDomainSocket?: boolean;
}
export declare class IpcClient {
    /**
     * @param portOrOptions can be a port number, or an options object
     */
    constructor(portOrOptions?: IpcClientOptions | number);
    config: {
        targetPort: number;
        targetHost: string;
        header: number;
        timeout: number;
        isUnixDomainSocket: boolean;
    };
    client?: typeof OscIpcClient;
    queue: any[];
    timeout: number;
    connectPromise?: Promise<any>;
    broken: boolean;
    keepOpen: boolean;
    connected: boolean;
    connectionInitiated: boolean;
    rejectAllPendingRequests(reason: any): void;
    /**
     * For Internal Use Only.
     *
     * Note that this does not set `.broken=true`. A rejected request may not
     * always indicate a broken connection. The caller should set `.broken` when
     * warranted.
     */
    rejectPendingRequest(pObj: any, reason: any): any;
    /**
     * @returns {Promise}
     */
    connect(keepOpen?: boolean): Promise<any>;
    /**
     * Send a message to the server.
     * @param msgObject Can be an osc-min object json or a Buffer
     * @param timetag See osc-min docs for details
     */
    send(msgObject: object | Buffer, timetag?: Date | number[]): Promise<any>;
    get targetPort(): void;
    /**
     * Close the client, causing all pending promises to immediately reject. You
     * may call close() multiple times.
     */
    close(error?: any): void;
    closeIfDone: () => void;
}
export {};
