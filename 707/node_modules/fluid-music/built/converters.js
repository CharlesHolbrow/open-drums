"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.velocityNumberToDynamic = exports.midiVelocityToDbfs = exports.numberToMidiNote = exports.f2m = exports.m2f = exports.valueToMidiNoteNumber = exports.valueToWholeNotes = exports.gainToDb = exports.dbToGain = exports.clamp = void 0;
const s11 = require('sharp11');
const Parser = require('expr-eval').Parser;
const parser = new Parser();
function clamp(min, max, v) {
    if (min > max)
        [min, max] = [max, min];
    return Math.max(Math.min(max, v), min);
}
exports.clamp = clamp;
function dbToGain(db) {
    return Math.pow(10, db / 20);
}
exports.dbToGain = dbToGain;
function gainToDb(gain) {
    return 20 * Math.log10(gain);
}
exports.gainToDb = gainToDb;
/**
 * Convert a string or number to a number of whole notes.
 * @param {String|Number} value - input value can be 'quarter' or '1/4' or 0.25
 * @returns {Number} - A duration in whole notes
 */
exports.valueToWholeNotes = function (value) {
    let length;
    if (typeof value === 'number')
        length = value;
    else if (typeof value === 'string') {
        if (value === 'quarter')
            return 0.25;
        if (value === 'half')
            return 0.5;
        if (value === 'whole')
            return 1;
        try {
            length = parser.evaluate(value);
        }
        catch (e) {
            length = s11.duration.asDuration(value).value() * 0.25;
        }
    }
    else
        throw new Error('Cannot convert to number of whole notes:' + JSON.stringify(value));
    return length;
};
exports.valueToMidiNoteNumber = function (value) {
    let noteNumber;
    if (typeof value === 'number')
        noteNumber = value;
    else if (typeof value === 'string') {
        let i = value.indexOf('+');
        if (i === -1)
            i = value.indexOf('-');
        if (i !== -1) {
            const first = value.slice(0, i);
            const second = value.slice(i);
            noteNumber = parser.evaluate(s11.note.create(first).value() + second);
        }
        else {
            noteNumber = s11.note.create(value).value();
        }
    }
    else
        throw new Error('Note value invalid: ' + JSON.stringify(value));
    return noteNumber;
};
/**
 * Convert a midi note number to fundamental frequency in hz. Equal temperment.
 * @param midiNoteNumber
 * @returns fundamental frequency in hz
 */
exports.m2f = (midiNote) => 440 * Math.pow(2, (midiNote - 69) / 12);
/**
 * Convert a frequency to a midi note number, assuming 69=A5=440hz.
 * The output is not rounded to an integer, so use Math.round on the output if
 * you need an integer note number.
 * @param hz frequency in hz
 * @returns midi note number
 */
exports.f2m = (hz) => 69 + 12 * Math.log2(hz / 440);
exports.numberToMidiNote = (note) => ({ type: 'midiNote', note });
function midiVelocityToDbfs(v, min = -60, max = 6) {
    const range = max - min;
    return clamp(min, max, v / 127 * range + min);
}
exports.midiVelocityToDbfs = midiVelocityToDbfs;
;
function velocityNumberToDynamic(velocity) {
    return {
        v: velocity,
        dbfs: midiVelocityToDbfs(velocity, -10, 10),
        intensity: clamp(0, 1, Math.floor(velocity / 127)),
    };
}
exports.velocityNumberToDynamic = velocityNumberToDynamic;
//# sourceMappingURL=converters.js.map