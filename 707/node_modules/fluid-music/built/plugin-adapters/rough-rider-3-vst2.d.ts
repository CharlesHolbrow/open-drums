import { FluidPlugin } from '../FluidPlugin';
import { PluginAutomation } from '../techniques';
export interface RoughRider3Vst2Parameters {
    /** hz value from 20 to 250 */
    sidechainHighpass?: number;
    /** db value from -60 to 5 */
    inputGainDb?: number;
    /** db value from -60 to 0 */
    sensitivityDb?: number;
    /** value from 1 to 1000 */
    ratio?: number;
    /** ms value from 0 to 100 */
    attackMs?: number;
    /** ms value from 10 to 1000 */
    releaseMs?: number;
    /** db value from 0 to 30 */
    makeupGainDb?: number;
    /** percent value from 0 to 100 */
    mixPercent?: number;
    /** db value from -60 to 5 */
    outputLvlDb?: number;
    externalSidechainEnable?: number;
    fullBandwidth?: number;
}
export declare class RoughRider3Vst2 extends FluidPlugin {
    readonly parameters: RoughRider3Vst2Parameters;
    constructor(parameters?: RoughRider3Vst2Parameters);
    readonly parameterLibrary: {
        sidechainHighpass: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        inputGainDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        sensitivityDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        ratio: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            normalize: (ratio: number) => number;
        };
        attackMs: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        releaseMs: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        makeupGainDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        mixPercent: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        outputLvlDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        externalSidechainEnable: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                off: number;
                on: number;
            };
        };
        fullBandwidth: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                off: number;
                on: number;
            };
        };
    };
    readonly makeAutomation: {
        sidechainHighpass(value?: number | undefined, curve?: number): PluginAutomation;
        inputGainDb(value?: number | undefined, curve?: number): PluginAutomation;
        sensitivityDb(value?: number | undefined, curve?: number): PluginAutomation;
        ratio(value?: number | undefined, curve?: number): PluginAutomation;
        attackMs(value?: number | undefined, curve?: number): PluginAutomation;
        releaseMs(value?: number | undefined, curve?: number): PluginAutomation;
        makeupGainDb(value?: number | undefined, curve?: number): PluginAutomation;
        mixPercent(value?: number | undefined, curve?: number): PluginAutomation;
        outputLvlDb(value?: number | undefined, curve?: number): PluginAutomation;
        externalSidechainEnable(value?: number | undefined, curve?: number): PluginAutomation;
        fullBandwidth(value?: number | undefined, curve?: number): PluginAutomation;
    };
    static readonly parameterLibrary: {
        sidechainHighpass: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        inputGainDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        sensitivityDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        ratio: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            normalize: (ratio: number) => number;
        };
        attackMs: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        releaseMs: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        makeupGainDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        mixPercent: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        outputLvlDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        externalSidechainEnable: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                off: number;
                on: number;
            };
        };
        fullBandwidth: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                off: number;
                on: number;
            };
        };
    };
    static readonly makeAutomation: {
        sidechainHighpass(value?: number | undefined, curve?: number): PluginAutomation;
        inputGainDb(value?: number | undefined, curve?: number): PluginAutomation;
        sensitivityDb(value?: number | undefined, curve?: number): PluginAutomation;
        ratio(value?: number | undefined, curve?: number): PluginAutomation;
        attackMs(value?: number | undefined, curve?: number): PluginAutomation;
        releaseMs(value?: number | undefined, curve?: number): PluginAutomation;
        makeupGainDb(value?: number | undefined, curve?: number): PluginAutomation;
        mixPercent(value?: number | undefined, curve?: number): PluginAutomation;
        outputLvlDb(value?: number | undefined, curve?: number): PluginAutomation;
        externalSidechainEnable(value?: number | undefined, curve?: number): PluginAutomation;
        fullBandwidth(value?: number | undefined, curve?: number): PluginAutomation;
    };
}
