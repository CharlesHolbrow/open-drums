"use strict";
// Charles: Rather than write a plugin generator for this plugin, I wrote this
// one manually when I was designing the plugin API. As such, it does not have a
// generator.
//
// NOTE: All DragonflyRoom parameters are linear.
Object.defineProperty(exports, "__esModule", { value: true });
exports.DragonflyRoomVst2 = void 0;
const FluidPlugin_1 = require("../FluidPlugin");
const techniques_1 = require("../techniques");
const pluginName = 'DragonflyRoomReverb';
const pluginType = FluidPlugin_1.PluginType.VST2;
/**
 * DragonflyRoomStateRangeChecks is an example stub that shows how range
 * checking could be implemented for parameter values.
 * @ignore
 */
class DragonflyRoomStateRangeChecks {
    constructor() {
        this._data = {};
    }
    set dryLevelPercent(value) {
        if (parameterLibrary.dryLevelPercent.range) {
            const r1 = parameterLibrary.dryLevelPercent.range[0];
            const r2 = parameterLibrary.dryLevelPercent.range[1];
            const min = Math.min(r1, r2);
            const max = Math.max(r1, r2);
            if (value < min)
                throw new Error(`dryLevelPercent too low`);
            if (value > max)
                throw new Error(`dryLevelPercent too high`);
        }
        this._data.dryLevelPercent = value;
    }
    get dryLevelPercent() { return this._data.dryLevelPercent; }
}
// Tracktion adds 'Dry Level' and 'Wet Level' parameters, both of which are not
// built into the actual plugin. Typically, this means that plugin adapters
// should not have 'Dry Level' and 'Wet Level' parameters with indexes. However,
// DragonFlyRoomReverb-vst has its own 'Dry Level' parameter with index=0, so
// the `dryLevelPercent` parameter below does have an index.
const parameterLibrary = {
    dryLevelPercent: {
        name: 'Dry Level',
        units: 'percent',
        isLinear: true,
        range: [0, 100],
        index: 0,
    },
    earlyLevelPercent: {
        name: 'Early Level',
        units: 'percent',
        isLinear: true,
        range: [0, 100],
        index: 1,
    },
    earlySendPercent: {
        name: 'Early Send',
        units: 'percent',
        isLinear: true,
        range: [0, 100],
        index: 2,
    },
    lateLevelPercent: {
        name: 'Late Level',
        units: 'percent',
        isLinear: true,
        range: [0, 100],
        index: 3,
    },
    sizeMeters: {
        name: 'Size',
        units: 'meters',
        isLinear: true,
        range: [8, 32],
        index: 4,
    },
    widthPercent: {
        name: 'Width',
        units: 'percent',
        isLinear: true,
        range: [50, 150],
        index: 5,
    },
    predelayMs: {
        name: 'Predelay',
        units: 'milliseconds',
        isLinear: true,
        range: [0, 100],
        index: 6,
    },
    decaySeconds: {
        name: 'Decay',
        units: 'seconds',
        isLinear: true,
        range: [0.1, 10],
        index: 7,
    },
    diffusePercent: {
        name: 'Diffuse',
        units: 'percent',
        isLinear: true,
        range: [0, 100],
        index: 8,
    },
    spinHz: {
        name: 'Spin',
        units: 'hz',
        isLinear: true,
        range: [0, 5],
        index: 9,
    },
    wanderPercent: {
        name: 'Wander',
        units: 'percent',
        isLinear: true,
        range: [0, 100],
        index: 10,
    },
    highCutHz: {
        name: 'High Cut',
        units: 'hz',
        isLinear: true,
        range: [1000, 16000],
        index: 11,
    },
    earlyDampHz: {
        name: 'Early Damp',
        units: 'hz',
        isLinear: true,
        range: [1000, 16000],
        index: 12,
    },
    lateDampHz: {
        name: 'Late Damp',
        units: 'hz',
        isLinear: true,
        range: [1000, 16000],
        index: 13,
    },
    lowBoostPercent: {
        name: 'Low Boost',
        units: 'percent',
        isLinear: true,
        range: [0, 100],
        index: 14,
    },
    lowBoostHz: {
        name: 'Boost Freq',
        units: 'hz',
        isLinear: true,
        range: [50, 1050],
        index: 15,
    },
    lowCutHz: {
        name: 'Low Cut',
        units: 'hz',
        isLinear: true,
        range: [50, 200],
        index: 16,
    },
};
const makeAutomation = {
    dryLevelPercent(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            paramKey: 'dryLevelPercent',
            pluginSelector: { pluginName, pluginType }
        });
    },
    earlyLevelPercent(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'earlyLevelPercent',
        });
    },
    earlySendPercent(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'earlySendPercent',
        });
    },
    lateLevelPercent(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'lateLevelPercent',
        });
    },
    sizeMeters(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'sizeMeters',
        });
    },
    widthPercent(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'widthPercent',
        });
    },
    predelayMs(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'predelayMs',
        });
    },
    decaySeconds(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'decaySeconds',
        });
    },
    diffusePercent(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'diffusePercent',
        });
    },
    spinHz(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'spinHz',
        });
    },
    wanderPercent(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'wanderPercent',
        });
    },
    highCutHz(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'highCutHz',
        });
    },
    earlyDampHz(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'earlyDampHz',
        });
    },
    lateDampHz(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'lateDampHz',
        });
    },
    lowBoostPercent(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'lowBoostPercent',
        });
    },
    lowBoostHz(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'lowBoostHz',
        });
    },
    lowCutHz(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'lowCutHz',
        });
    },
};
class DragonflyRoomVst2 extends FluidPlugin_1.FluidPlugin {
    constructor(parameters = {}) {
        super(pluginName, FluidPlugin_1.PluginType.VST2);
        this.parameters = parameters;
        this.parameterLibrary = parameterLibrary;
        this.makeAutomation = makeAutomation;
    }
}
exports.DragonflyRoomVst2 = DragonflyRoomVst2;
// Static members
DragonflyRoomVst2.parameterLibrary = parameterLibrary;
DragonflyRoomVst2.makeAutomation = makeAutomation;
//# sourceMappingURL=dragonfly-room-vst2.js.map