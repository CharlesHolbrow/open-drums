import { FluidPlugin } from '../FluidPlugin';
import { PluginAutomation } from '../techniques';
export interface TEqualizerVst2Parameters {
    band1State?: number;
    /** hz value from 10 to 30000 */
    band1FrequencyHz?: number;
    /** db value from -30 to 30 */
    band1GainDb?: number;
    /** value from 0.025 to 40 */
    band1Q?: number;
    band1Shape?: number;
    band2State?: number;
    /** hz value from 10 to 30000 */
    band2FrequencyHz?: number;
    /** db value from -30 to 30 */
    band2GainDb?: number;
    /** value from 0.025 to 40 */
    band2Q?: number;
    band2Shape?: number;
    band3State?: number;
    /** hz value from 10 to 30000 */
    band3FrequencyHz?: number;
    /** db value from -30 to 30 */
    band3GainDb?: number;
    /** value from 0.025 to 40 */
    band3Q?: number;
    band3Shape?: number;
    band4State?: number;
    /** hz value from 10 to 30000 */
    band4FrequencyHz?: number;
    /** db value from -30 to 30 */
    band4GainDb?: number;
    /** value from 0.025 to 40 */
    band4Q?: number;
    band4Shape?: number;
    band5State?: number;
    /** hz value from 10 to 30000 */
    band5FrequencyHz?: number;
    /** db value from -30 to 30 */
    band5GainDb?: number;
    /** value from 0.025 to 40 */
    band5Q?: number;
    band5Shape?: number;
    band6State?: number;
    /** hz value from 10 to 30000 */
    band6FrequencyHz?: number;
    /** db value from -30 to 30 */
    band6GainDb?: number;
    /** value from 0.025 to 40 */
    band6Q?: number;
    band6Shape?: number;
    band7State?: number;
    /** hz value from 10 to 30000 */
    band7FrequencyHz?: number;
    /** db value from -30 to 30 */
    band7GainDb?: number;
    /** value from 0.025 to 40 */
    band7Q?: number;
    band7Shape?: number;
    band8State?: number;
    /** hz value from 10 to 30000 */
    band8FrequencyHz?: number;
    /** db value from -30 to 30 */
    band8GainDb?: number;
    /** value from 0.025 to 40 */
    band8Q?: number;
    band8Shape?: number;
    enable?: number;
    /** db value from -48 to 6 */
    outputGainDb?: number;
    soloBand?: number;
    /** db value from -48 to 12 */
    soloGainDb?: number;
    analyserMode?: number;
}
export declare class TEqualizerVst2 extends FluidPlugin {
    readonly parameters: TEqualizerVst2Parameters;
    constructor(parameters?: TEqualizerVst2Parameters);
    readonly parameterLibrary: {
        band1State: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
                2: number;
            };
        };
        band1FrequencyHz: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
            powerFuncB: number;
        };
        band1GainDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        band1Q: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            powerFuncB: number;
        };
        band1Shape: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                lowPass: number;
                lowShelf: number;
                peakNotch: number;
                bandPass: number;
                bandStop: number;
                highShelf: number;
                highPass: number;
            };
        };
        band2State: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
                2: number;
            };
        };
        band2FrequencyHz: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
            powerFuncB: number;
        };
        band2GainDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        band2Q: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            powerFuncB: number;
        };
        band2Shape: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                lowPass: number;
                lowShelf: number;
                peakNotch: number;
                bandPass: number;
                bandStop: number;
                highShelf: number;
                highPass: number;
            };
        };
        band3State: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
                2: number;
            };
        };
        band3FrequencyHz: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
            powerFuncB: number;
        };
        band3GainDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        band3Q: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            powerFuncB: number;
        };
        band3Shape: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                lowPass: number;
                lowShelf: number;
                peakNotch: number;
                bandPass: number;
                bandStop: number;
                highShelf: number;
                highPass: number;
            };
        };
        band4State: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
                2: number;
            };
        };
        band4FrequencyHz: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
            powerFuncB: number;
        };
        band4GainDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        band4Q: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            powerFuncB: number;
        };
        band4Shape: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                lowPass: number;
                lowShelf: number;
                peakNotch: number;
                bandPass: number;
                bandStop: number;
                highShelf: number;
                highPass: number;
            };
        };
        band5State: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
                2: number;
            };
        };
        band5FrequencyHz: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
            powerFuncB: number;
        };
        band5GainDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        band5Q: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            powerFuncB: number;
        };
        band5Shape: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                lowPass: number;
                lowShelf: number;
                peakNotch: number;
                bandPass: number;
                bandStop: number;
                highShelf: number;
                highPass: number;
            };
        };
        band6State: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
                2: number;
            };
        };
        band6FrequencyHz: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
            powerFuncB: number;
        };
        band6GainDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        band6Q: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            powerFuncB: number;
        };
        band6Shape: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                lowPass: number;
                lowShelf: number;
                peakNotch: number;
                bandPass: number;
                bandStop: number;
                highShelf: number;
                highPass: number;
            };
        };
        band7State: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
                2: number;
            };
        };
        band7FrequencyHz: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
            powerFuncB: number;
        };
        band7GainDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        band7Q: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            powerFuncB: number;
        };
        band7Shape: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                lowPass: number;
                lowShelf: number;
                peakNotch: number;
                bandPass: number;
                bandStop: number;
                highShelf: number;
                highPass: number;
            };
        };
        band8State: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
                2: number;
            };
        };
        band8FrequencyHz: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
            powerFuncB: number;
        };
        band8GainDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        band8Q: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            powerFuncB: number;
        };
        band8Shape: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                lowPass: number;
                lowShelf: number;
                peakNotch: number;
                bandPass: number;
                bandStop: number;
                highShelf: number;
                highPass: number;
            };
        };
        enable: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
            };
        };
        outputGainDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        soloBand: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
                2: number;
                3: number;
                4: number;
                5: number;
                6: number;
                7: number;
                8: number;
                "-1": number;
            };
        };
        soloGainDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        analyserMode: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
                2: number;
                3: number;
            };
        };
    };
    readonly makeAutomation: {
        band1State(value?: number | undefined, curve?: number): PluginAutomation;
        band1FrequencyHz(value?: number | undefined, curve?: number): PluginAutomation;
        band1GainDb(value?: number | undefined, curve?: number): PluginAutomation;
        band1Q(value?: number | undefined, curve?: number): PluginAutomation;
        band1Shape(value?: number | undefined, curve?: number): PluginAutomation;
        band2State(value?: number | undefined, curve?: number): PluginAutomation;
        band2FrequencyHz(value?: number | undefined, curve?: number): PluginAutomation;
        band2GainDb(value?: number | undefined, curve?: number): PluginAutomation;
        band2Q(value?: number | undefined, curve?: number): PluginAutomation;
        band2Shape(value?: number | undefined, curve?: number): PluginAutomation;
        band3State(value?: number | undefined, curve?: number): PluginAutomation;
        band3FrequencyHz(value?: number | undefined, curve?: number): PluginAutomation;
        band3GainDb(value?: number | undefined, curve?: number): PluginAutomation;
        band3Q(value?: number | undefined, curve?: number): PluginAutomation;
        band3Shape(value?: number | undefined, curve?: number): PluginAutomation;
        band4State(value?: number | undefined, curve?: number): PluginAutomation;
        band4FrequencyHz(value?: number | undefined, curve?: number): PluginAutomation;
        band4GainDb(value?: number | undefined, curve?: number): PluginAutomation;
        band4Q(value?: number | undefined, curve?: number): PluginAutomation;
        band4Shape(value?: number | undefined, curve?: number): PluginAutomation;
        band5State(value?: number | undefined, curve?: number): PluginAutomation;
        band5FrequencyHz(value?: number | undefined, curve?: number): PluginAutomation;
        band5GainDb(value?: number | undefined, curve?: number): PluginAutomation;
        band5Q(value?: number | undefined, curve?: number): PluginAutomation;
        band5Shape(value?: number | undefined, curve?: number): PluginAutomation;
        band6State(value?: number | undefined, curve?: number): PluginAutomation;
        band6FrequencyHz(value?: number | undefined, curve?: number): PluginAutomation;
        band6GainDb(value?: number | undefined, curve?: number): PluginAutomation;
        band6Q(value?: number | undefined, curve?: number): PluginAutomation;
        band6Shape(value?: number | undefined, curve?: number): PluginAutomation;
        band7State(value?: number | undefined, curve?: number): PluginAutomation;
        band7FrequencyHz(value?: number | undefined, curve?: number): PluginAutomation;
        band7GainDb(value?: number | undefined, curve?: number): PluginAutomation;
        band7Q(value?: number | undefined, curve?: number): PluginAutomation;
        band7Shape(value?: number | undefined, curve?: number): PluginAutomation;
        band8State(value?: number | undefined, curve?: number): PluginAutomation;
        band8FrequencyHz(value?: number | undefined, curve?: number): PluginAutomation;
        band8GainDb(value?: number | undefined, curve?: number): PluginAutomation;
        band8Q(value?: number | undefined, curve?: number): PluginAutomation;
        band8Shape(value?: number | undefined, curve?: number): PluginAutomation;
        enable(value?: number | undefined, curve?: number): PluginAutomation;
        outputGainDb(value?: number | undefined, curve?: number): PluginAutomation;
        soloBand(value?: number | undefined, curve?: number): PluginAutomation;
        soloGainDb(value?: number | undefined, curve?: number): PluginAutomation;
        analyserMode(value?: number | undefined, curve?: number): PluginAutomation;
    };
    static readonly parameterLibrary: {
        band1State: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
                2: number;
            };
        };
        band1FrequencyHz: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
            powerFuncB: number;
        };
        band1GainDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        band1Q: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            powerFuncB: number;
        };
        band1Shape: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                lowPass: number;
                lowShelf: number;
                peakNotch: number;
                bandPass: number;
                bandStop: number;
                highShelf: number;
                highPass: number;
            };
        };
        band2State: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
                2: number;
            };
        };
        band2FrequencyHz: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
            powerFuncB: number;
        };
        band2GainDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        band2Q: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            powerFuncB: number;
        };
        band2Shape: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                lowPass: number;
                lowShelf: number;
                peakNotch: number;
                bandPass: number;
                bandStop: number;
                highShelf: number;
                highPass: number;
            };
        };
        band3State: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
                2: number;
            };
        };
        band3FrequencyHz: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
            powerFuncB: number;
        };
        band3GainDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        band3Q: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            powerFuncB: number;
        };
        band3Shape: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                lowPass: number;
                lowShelf: number;
                peakNotch: number;
                bandPass: number;
                bandStop: number;
                highShelf: number;
                highPass: number;
            };
        };
        band4State: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
                2: number;
            };
        };
        band4FrequencyHz: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
            powerFuncB: number;
        };
        band4GainDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        band4Q: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            powerFuncB: number;
        };
        band4Shape: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                lowPass: number;
                lowShelf: number;
                peakNotch: number;
                bandPass: number;
                bandStop: number;
                highShelf: number;
                highPass: number;
            };
        };
        band5State: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
                2: number;
            };
        };
        band5FrequencyHz: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
            powerFuncB: number;
        };
        band5GainDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        band5Q: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            powerFuncB: number;
        };
        band5Shape: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                lowPass: number;
                lowShelf: number;
                peakNotch: number;
                bandPass: number;
                bandStop: number;
                highShelf: number;
                highPass: number;
            };
        };
        band6State: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
                2: number;
            };
        };
        band6FrequencyHz: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
            powerFuncB: number;
        };
        band6GainDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        band6Q: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            powerFuncB: number;
        };
        band6Shape: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                lowPass: number;
                lowShelf: number;
                peakNotch: number;
                bandPass: number;
                bandStop: number;
                highShelf: number;
                highPass: number;
            };
        };
        band7State: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
                2: number;
            };
        };
        band7FrequencyHz: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
            powerFuncB: number;
        };
        band7GainDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        band7Q: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            powerFuncB: number;
        };
        band7Shape: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                lowPass: number;
                lowShelf: number;
                peakNotch: number;
                bandPass: number;
                bandStop: number;
                highShelf: number;
                highPass: number;
            };
        };
        band8State: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
                2: number;
            };
        };
        band8FrequencyHz: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
            powerFuncB: number;
        };
        band8GainDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        band8Q: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            powerFuncB: number;
        };
        band8Shape: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                lowPass: number;
                lowShelf: number;
                peakNotch: number;
                bandPass: number;
                bandStop: number;
                highShelf: number;
                highPass: number;
            };
        };
        enable: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
            };
        };
        outputGainDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        soloBand: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
                2: number;
                3: number;
                4: number;
                5: number;
                6: number;
                7: number;
                8: number;
                "-1": number;
            };
        };
        soloGainDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        analyserMode: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
                2: number;
                3: number;
            };
        };
    };
    static readonly makeAutomation: {
        band1State(value?: number | undefined, curve?: number): PluginAutomation;
        band1FrequencyHz(value?: number | undefined, curve?: number): PluginAutomation;
        band1GainDb(value?: number | undefined, curve?: number): PluginAutomation;
        band1Q(value?: number | undefined, curve?: number): PluginAutomation;
        band1Shape(value?: number | undefined, curve?: number): PluginAutomation;
        band2State(value?: number | undefined, curve?: number): PluginAutomation;
        band2FrequencyHz(value?: number | undefined, curve?: number): PluginAutomation;
        band2GainDb(value?: number | undefined, curve?: number): PluginAutomation;
        band2Q(value?: number | undefined, curve?: number): PluginAutomation;
        band2Shape(value?: number | undefined, curve?: number): PluginAutomation;
        band3State(value?: number | undefined, curve?: number): PluginAutomation;
        band3FrequencyHz(value?: number | undefined, curve?: number): PluginAutomation;
        band3GainDb(value?: number | undefined, curve?: number): PluginAutomation;
        band3Q(value?: number | undefined, curve?: number): PluginAutomation;
        band3Shape(value?: number | undefined, curve?: number): PluginAutomation;
        band4State(value?: number | undefined, curve?: number): PluginAutomation;
        band4FrequencyHz(value?: number | undefined, curve?: number): PluginAutomation;
        band4GainDb(value?: number | undefined, curve?: number): PluginAutomation;
        band4Q(value?: number | undefined, curve?: number): PluginAutomation;
        band4Shape(value?: number | undefined, curve?: number): PluginAutomation;
        band5State(value?: number | undefined, curve?: number): PluginAutomation;
        band5FrequencyHz(value?: number | undefined, curve?: number): PluginAutomation;
        band5GainDb(value?: number | undefined, curve?: number): PluginAutomation;
        band5Q(value?: number | undefined, curve?: number): PluginAutomation;
        band5Shape(value?: number | undefined, curve?: number): PluginAutomation;
        band6State(value?: number | undefined, curve?: number): PluginAutomation;
        band6FrequencyHz(value?: number | undefined, curve?: number): PluginAutomation;
        band6GainDb(value?: number | undefined, curve?: number): PluginAutomation;
        band6Q(value?: number | undefined, curve?: number): PluginAutomation;
        band6Shape(value?: number | undefined, curve?: number): PluginAutomation;
        band7State(value?: number | undefined, curve?: number): PluginAutomation;
        band7FrequencyHz(value?: number | undefined, curve?: number): PluginAutomation;
        band7GainDb(value?: number | undefined, curve?: number): PluginAutomation;
        band7Q(value?: number | undefined, curve?: number): PluginAutomation;
        band7Shape(value?: number | undefined, curve?: number): PluginAutomation;
        band8State(value?: number | undefined, curve?: number): PluginAutomation;
        band8FrequencyHz(value?: number | undefined, curve?: number): PluginAutomation;
        band8GainDb(value?: number | undefined, curve?: number): PluginAutomation;
        band8Q(value?: number | undefined, curve?: number): PluginAutomation;
        band8Shape(value?: number | undefined, curve?: number): PluginAutomation;
        enable(value?: number | undefined, curve?: number): PluginAutomation;
        outputGainDb(value?: number | undefined, curve?: number): PluginAutomation;
        soloBand(value?: number | undefined, curve?: number): PluginAutomation;
        soloGainDb(value?: number | undefined, curve?: number): PluginAutomation;
        analyserMode(value?: number | undefined, curve?: number): PluginAutomation;
    };
    /**
     * Configure EQ band 1 frequency, gain, and Q
     * @param hz frequency in hertz (10 to 30000)
     * @param gain band gain in dB (-30 to 30, 0 is unity gain)
     * @param q band width (0.025 to 40, higher is narrower)
     * @param active
     */
    setBand1(hz?: number, gain?: number, q?: number, active?: boolean): void;
    /**
     * Configure EQ band 2 frequency, gain, and Q
     * @param hz frequency in hertz (10 to 30000)
     * @param gain band gain in dB (-30 to 30, 0 is unity gain)
     * @param q band width (0.025 to 40, higher is narrower)
     * @param active
     */
    setBand2(hz?: number, gain?: number, q?: number, active?: boolean): void;
    /**
     * Configure EQ band 3 frequency, gain, and Q
     * @param hz frequency in hertz (10 to 30000)
     * @param gain band gain in dB (-30 to 30, 0 is unity gain)
     * @param q band width (0.025 to 40, higher is narrower)
     * @param active
     */
    setBand3(hz?: number, gain?: number, q?: number, active?: boolean): void;
    /**
     * Configure EQ band 4 frequency, gain, and Q
     * @param hz frequency in hertz (10 to 30000)
     * @param gain band gain in dB (-30 to 30, 0 is unity gain)
     * @param q band width (0.025 to 40, higher is narrower)
     * @param active
     */
    setBand4(hz?: number, gain?: number, q?: number, active?: boolean): void;
    /**
     * Configure EQ band 5 frequency, gain, and Q
     * @param hz frequency in hertz (10 to 30000)
     * @param gain band gain in dB (-30 to 30, 0 is unity gain)
     * @param q band width (0.025 to 40, higher is narrower)
     * @param active
     */
    setBand5(hz?: number, gain?: number, q?: number, active?: boolean): void;
    /**
     * Configure EQ band 6 frequency, gain, and Q
     * @param hz frequency in hertz (10 to 30000)
     * @param gain band gain in dB (-30 to 30, 0 is unity gain)
     * @param q band width (0.025 to 40, higher is narrower)
     * @param active
     */
    setBand6(hz?: number, gain?: number, q?: number, active?: boolean): void;
    /**
     * Configure EQ band 7 frequency, gain, and Q
     * @param hz frequency in hertz (10 to 30000)
     * @param gain band gain in dB (-30 to 30, 0 is unity gain)
     * @param q band width (0.025 to 40, higher is narrower)
     * @param active
     */
    setBand7(hz?: number, gain?: number, q?: number, active?: boolean): void;
    /**
     * Configure EQ band 8 frequency, gain, and Q
     * @param hz frequency in hertz (10 to 30000)
     * @param gain band gain in dB (-30 to 30, 0 is unity gain)
     * @param q band width (0.025 to 40, higher is narrower)
     * @param active
     */
    setBand8(hz?: number, gain?: number, q?: number, active?: boolean): void;
}
