import { FluidPlugin } from '../FluidPlugin';
import { PluginAutomation } from '../techniques';
export interface DragonflyRoomVst2Parameters {
    dryLevelPercent?: number;
    earlyLevelPercent?: number;
    earlySendPercent?: number;
    lateLevelPercent?: number;
    sizeMeters?: number;
    widthPercent?: number;
    predelayMs?: number;
    decaySeconds?: number;
    diffusePercent?: number;
    spinHz?: number;
    wanderPercent?: number;
    highCutHz?: number;
    earlyDampHz?: number;
    lateDampHz?: number;
    lowBoostPercent?: number;
    lowBoostHz?: number;
    lowCutHz?: number;
}
export declare class DragonflyRoomVst2 extends FluidPlugin {
    readonly parameters: DragonflyRoomVst2Parameters;
    constructor(parameters?: DragonflyRoomVst2Parameters);
    readonly parameterLibrary: {
        dryLevelPercent: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        earlyLevelPercent: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        earlySendPercent: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        lateLevelPercent: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        sizeMeters: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        widthPercent: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        predelayMs: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        decaySeconds: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        diffusePercent: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        spinHz: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        wanderPercent: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        highCutHz: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        earlyDampHz: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        lateDampHz: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        lowBoostPercent: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        lowBoostHz: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        lowCutHz: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
    };
    readonly makeAutomation: {
        dryLevelPercent(value?: number | undefined, curve?: number): PluginAutomation;
        earlyLevelPercent(value?: number | undefined, curve?: number): PluginAutomation;
        earlySendPercent(value?: number | undefined, curve?: number): PluginAutomation;
        lateLevelPercent(value?: number | undefined, curve?: number): PluginAutomation;
        sizeMeters(value?: number | undefined, curve?: number): PluginAutomation;
        widthPercent(value?: number | undefined, curve?: number): PluginAutomation;
        predelayMs(value?: number | undefined, curve?: number): PluginAutomation;
        decaySeconds(value?: number | undefined, curve?: number): PluginAutomation;
        diffusePercent(value?: number | undefined, curve?: number): PluginAutomation;
        spinHz(value?: number | undefined, curve?: number): PluginAutomation;
        wanderPercent(value?: number | undefined, curve?: number): PluginAutomation;
        highCutHz(value?: number | undefined, curve?: number): PluginAutomation;
        earlyDampHz(value?: number | undefined, curve?: number): PluginAutomation;
        lateDampHz(value?: number | undefined, curve?: number): PluginAutomation;
        lowBoostPercent(value?: number | undefined, curve?: number): PluginAutomation;
        lowBoostHz(value?: number | undefined, curve?: number): PluginAutomation;
        lowCutHz(value?: number | undefined, curve?: number): PluginAutomation;
    };
    static readonly parameterLibrary: {
        dryLevelPercent: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        earlyLevelPercent: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        earlySendPercent: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        lateLevelPercent: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        sizeMeters: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        widthPercent: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        predelayMs: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        decaySeconds: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        diffusePercent: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        spinHz: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        wanderPercent: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        highCutHz: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        earlyDampHz: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        lateDampHz: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        lowBoostPercent: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        lowBoostHz: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
        lowCutHz: {
            name: string;
            units: string;
            isLinear: boolean;
            range: [number, number];
            index: number;
        };
    };
    static readonly makeAutomation: {
        dryLevelPercent(value?: number | undefined, curve?: number): PluginAutomation;
        earlyLevelPercent(value?: number | undefined, curve?: number): PluginAutomation;
        earlySendPercent(value?: number | undefined, curve?: number): PluginAutomation;
        lateLevelPercent(value?: number | undefined, curve?: number): PluginAutomation;
        sizeMeters(value?: number | undefined, curve?: number): PluginAutomation;
        widthPercent(value?: number | undefined, curve?: number): PluginAutomation;
        predelayMs(value?: number | undefined, curve?: number): PluginAutomation;
        decaySeconds(value?: number | undefined, curve?: number): PluginAutomation;
        diffusePercent(value?: number | undefined, curve?: number): PluginAutomation;
        spinHz(value?: number | undefined, curve?: number): PluginAutomation;
        wanderPercent(value?: number | undefined, curve?: number): PluginAutomation;
        highCutHz(value?: number | undefined, curve?: number): PluginAutomation;
        earlyDampHz(value?: number | undefined, curve?: number): PluginAutomation;
        lateDampHz(value?: number | undefined, curve?: number): PluginAutomation;
        lowBoostPercent(value?: number | undefined, curve?: number): PluginAutomation;
        lowBoostHz(value?: number | undefined, curve?: number): PluginAutomation;
        lowCutHz(value?: number | undefined, curve?: number): PluginAutomation;
    };
}
