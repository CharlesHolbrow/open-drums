"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TStereoDelayVst2 = void 0;
const FluidPlugin_1 = require("../FluidPlugin");
const techniques_1 = require("../techniques");
const pluginName = '#TStereo Delay';
const pluginType = FluidPlugin_1.PluginType.VST2;
const parameterLibrary = {
    enable: { name: 'Enable', index: 0, isLinear: false, choices: { "0": 0, "1": 1 } },
    inputDb: { name: 'Input', index: 1, isLinear: true, range: [-36, 36], units: 'db' },
    sync: { name: 'Sync', index: 2, isLinear: false, choices: { "none": 0, "tempo": 1 } },
    lSource: { name: 'L Source', index: 3, isLinear: false, choices: { "off": 0.1071428656578064, "left": 0.3571428656578064, "right": 0.6071428656578064, "l + r": 0.8571429252624512, "l - r": 1 } },
    lFeedbackPercent: { name: 'L Feedback', index: 4, isLinear: true, range: [-99, 99], units: 'percent' },
    lCrossFbPercent: { name: 'L Cross FB', index: 5, isLinear: true, range: [-99, 99], units: 'percent' },
    lNoteDelay: { name: 'L Note Delay', index: 6, isLinear: false, choices: { "half": 0.1428571492433548, "quarter": 0.4642857313156128, "eight": 0.8214285969734192, "sixteenth": 1 } },
    lNoteOffset: { name: 'L Note Offset', index: 7, isLinear: true, range: [-50, 100] },
    lDelayMs: { name: 'L Delay', index: 8, isLinear: true, range: [0, 5000], units: 'ms' },
    lPan: { name: 'L Pan', index: 9, isLinear: true, range: [-1, 1] },
    lLowCutHz: { name: 'L Low Cut', index: 10, isLinear: false, range: [20, 20000], units: 'hz', powerFuncB: 2 },
    lHighCutHz: { name: 'L High Cut', index: 11, isLinear: false, range: [20, 20000], units: 'hz', powerFuncB: 2 },
    rSource: { name: 'R Source', index: 12, isLinear: false, choices: { "off": 0.1071428656578064, "left": 0.3571428656578064, "right": 0.6071428656578064, "l + r": 0.8571429252624512, "l - r": 1 } },
    rFeedbackPercent: { name: 'R Feedback', index: 13, isLinear: true, range: [-99, 99], units: 'percent' },
    rCrossFbPercent: { name: 'R Cross FB', index: 14, isLinear: true, range: [-99, 99], units: 'percent' },
    rNoteDelay: { name: 'R Note Delay', index: 15, isLinear: false, choices: { "half": 0.1428571492433548, "quarter": 0.4642857313156128, "eight": 0.8214285969734192, "sixteenth": 1 } },
    rNoteOffset: { name: 'R Note Offset', index: 16, isLinear: true, range: [-50, 100] },
    rDelayMs: { name: 'R Delay', index: 17, isLinear: true, range: [0, 5000], units: 'ms' },
    rPan: { name: 'R Pan', index: 18, isLinear: true, range: [-1, 1] },
    rLowCutHz: { name: 'R Low Cut', index: 19, isLinear: false, range: [20, 20000], units: 'hz', powerFuncB: 2 },
    rHighCutHz: { name: 'R High Cut', index: 20, isLinear: false, range: [20, 20000], units: 'hz', powerFuncB: 2 },
    wetDb: { name: 'Wet', index: 21, isLinear: true, range: [-50, 18], units: 'db' },
    dryDb: { name: 'Dry', index: 22, isLinear: true, range: [-50, 18], units: 'db' }
};
const makeAutomation = {
    enable(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'enable',
        });
    },
    inputDb(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'inputDb',
        });
    },
    sync(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'sync',
        });
    },
    lSource(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'lSource',
        });
    },
    lFeedbackPercent(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'lFeedbackPercent',
        });
    },
    lCrossFbPercent(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'lCrossFbPercent',
        });
    },
    lNoteDelay(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'lNoteDelay',
        });
    },
    lNoteOffset(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'lNoteOffset',
        });
    },
    lDelayMs(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'lDelayMs',
        });
    },
    lPan(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'lPan',
        });
    },
    lLowCutHz(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'lLowCutHz',
        });
    },
    lHighCutHz(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'lHighCutHz',
        });
    },
    rSource(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'rSource',
        });
    },
    rFeedbackPercent(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'rFeedbackPercent',
        });
    },
    rCrossFbPercent(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'rCrossFbPercent',
        });
    },
    rNoteDelay(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'rNoteDelay',
        });
    },
    rNoteOffset(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'rNoteOffset',
        });
    },
    rDelayMs(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'rDelayMs',
        });
    },
    rPan(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'rPan',
        });
    },
    rLowCutHz(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'rLowCutHz',
        });
    },
    rHighCutHz(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'rHighCutHz',
        });
    },
    wetDb(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'wetDb',
        });
    },
    dryDb(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'dryDb',
        });
    }
};
class TStereoDelayVst2 extends FluidPlugin_1.FluidPlugin {
    constructor(parameters = {}) {
        super(pluginName, pluginType);
        this.parameters = parameters;
        this.parameterLibrary = parameterLibrary;
        this.makeAutomation = makeAutomation;
    }
}
exports.TStereoDelayVst2 = TStereoDelayVst2;
// Static members
TStereoDelayVst2.parameterLibrary = parameterLibrary;
TStereoDelayVst2.makeAutomation = makeAutomation;
//# sourceMappingURL=t-stereo-delay-vst2.js.map