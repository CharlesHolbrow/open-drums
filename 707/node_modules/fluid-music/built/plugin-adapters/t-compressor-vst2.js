"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TCompressorVst2 = void 0;
const FluidPlugin_1 = require("../FluidPlugin");
const techniques_1 = require("../techniques");
const pluginName = '#TCompressor';
const pluginType = FluidPlugin_1.PluginType.VST2;
const parameterLibrary = {
    enable: { name: 'Enable', index: 0, isLinear: false, choices: { "0": 0, "1": 1 } },
    mode: { name: 'Mode', index: 1, isLinear: false, choices: { "0": 0, "1": 1 } },
    thresholdDb: { name: 'Threshold', index: 2, isLinear: true, range: [-60, 0], units: 'db' },
    ratio: { name: 'Ratio', index: 3, isLinear: false, range: [1, 100], powerFuncB: 5 },
    attackMs: { name: 'Attack', index: 4, isLinear: true, range: [0.1, 100], units: 'ms' },
    holdMs: { name: 'Hold', index: 5, isLinear: true, range: [0, 1000], units: 'ms' },
    releaseMs: { name: 'Release', index: 6, isLinear: true, range: [1, 1000], units: 'ms' },
    inputDb: { name: 'Input', index: 7, isLinear: true, range: [-20, 20], units: 'db' },
    makeUpDb: { name: 'Make-up', index: 8, isLinear: true, range: [-20, 20], units: 'db' },
    softKneeDb: { name: 'Soft Knee', index: 9, isLinear: true, range: [0, 60], units: 'db' },
    lookaheadMs: { name: 'Lookahead', index: 10, isLinear: true, range: [0, 10], units: 'ms' },
    limit: { name: 'Limit', index: 11, isLinear: false, choices: { "0": 0, "1": 1 } },
    useSidechainTrigger: { name: 'Use Sidechain Trigger', index: 12, isLinear: false, choices: { "0": 0, "1": 1 } },
    monitorSidechain: { name: 'Monitor Sidechain', index: 13, isLinear: false, choices: { "0": 0, "1": 1 } },
    softClip: { name: 'Soft Clip', index: 14, isLinear: false, choices: { "off": 0, "on": 1 } },
    softClipThresholdDb: { name: 'Threshold (2)', index: 15, isLinear: true, range: [-60, 0], units: 'db' },
    peakDetection: { name: 'Peak Detection', index: 16, isLinear: false, choices: { "0": 0, "1": 1 } },
    useSumDetection: { name: 'Use Sum Detection', index: 17, isLinear: false, choices: { "0": 0, "1": 1 } },
    enableAutoMakeUpGain: { name: 'Auto', index: 18, isLinear: false, choices: { "off": 0, "on": 1 } },
    filter: { name: 'Filter', index: 19, isLinear: false, choices: { "off": 0, "on": 1 } },
    filterType: { name: 'Type', index: 20, isLinear: false, choices: { "0": 0, "1": 0.1428571492433548, "2": 0.2857142984867096, "3": 0.4285714626312256, "4": 0.5714285969734192, "5": 0.7142857313156128, "6": 0.8571429252624512, "7": 1 } },
    freqHz: { name: 'Freq', index: 21, isLinear: false, range: [10, 20000], units: 'hz', powerFuncB: 5 },
    q: { name: 'Q', index: 22, isLinear: false, range: [0.025, 40], powerFuncB: 5 },
    gainDb: { name: 'Gain', index: 23, isLinear: true, range: [-30, 30], units: 'db' }
};
const makeAutomation = {
    enable(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'enable',
        });
    },
    mode(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'mode',
        });
    },
    thresholdDb(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'thresholdDb',
        });
    },
    ratio(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'ratio',
        });
    },
    attackMs(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'attackMs',
        });
    },
    holdMs(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'holdMs',
        });
    },
    releaseMs(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'releaseMs',
        });
    },
    inputDb(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'inputDb',
        });
    },
    makeUpDb(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'makeUpDb',
        });
    },
    softKneeDb(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'softKneeDb',
        });
    },
    lookaheadMs(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'lookaheadMs',
        });
    },
    limit(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'limit',
        });
    },
    useSidechainTrigger(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'useSidechainTrigger',
        });
    },
    monitorSidechain(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'monitorSidechain',
        });
    },
    softClip(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'softClip',
        });
    },
    softClipThresholdDb(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'softClipThresholdDb',
        });
    },
    peakDetection(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'peakDetection',
        });
    },
    useSumDetection(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'useSumDetection',
        });
    },
    enableAutoMakeUpGain(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'enableAutoMakeUpGain',
        });
    },
    filter(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'filter',
        });
    },
    filterType(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'filterType',
        });
    },
    freqHz(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'freqHz',
        });
    },
    q(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'q',
        });
    },
    gainDb(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'gainDb',
        });
    }
};
class TCompressorVst2 extends FluidPlugin_1.FluidPlugin {
    constructor(parameters = {}) {
        super(pluginName, pluginType);
        this.parameters = parameters;
        this.parameterLibrary = parameterLibrary;
        this.makeAutomation = makeAutomation;
    }
}
exports.TCompressorVst2 = TCompressorVst2;
// Static members
TCompressorVst2.parameterLibrary = parameterLibrary;
TCompressorVst2.makeAutomation = makeAutomation;
//# sourceMappingURL=t-compressor-vst2.js.map