import { FluidPlugin } from '../FluidPlugin';
import { PluginAutomation } from '../techniques';
export interface TStereoDelayVst2Parameters {
    enable?: number;
    /** db value from -36 to 36 */
    inputDb?: number;
    sync?: number;
    lSource?: number;
    /** percent value from -99 to 99 */
    lFeedbackPercent?: number;
    /** percent value from -99 to 99 */
    lCrossFbPercent?: number;
    lNoteDelay?: number;
    /** value from -50 to 100 */
    lNoteOffset?: number;
    /** ms value from 0 to 5000 */
    lDelayMs?: number;
    /** value from -1 to 1 */
    lPan?: number;
    /** hz value from 20 to 20000 */
    lLowCutHz?: number;
    /** hz value from 20 to 20000 */
    lHighCutHz?: number;
    rSource?: number;
    /** percent value from -99 to 99 */
    rFeedbackPercent?: number;
    /** percent value from -99 to 99 */
    rCrossFbPercent?: number;
    rNoteDelay?: number;
    /** value from -50 to 100 */
    rNoteOffset?: number;
    /** ms value from 0 to 5000 */
    rDelayMs?: number;
    /** value from -1 to 1 */
    rPan?: number;
    /** hz value from 20 to 20000 */
    rLowCutHz?: number;
    /** hz value from 20 to 20000 */
    rHighCutHz?: number;
    /** db value from -50 to 18 */
    wetDb?: number;
    /** db value from -50 to 18 */
    dryDb?: number;
}
export declare class TStereoDelayVst2 extends FluidPlugin {
    readonly parameters: TStereoDelayVst2Parameters;
    constructor(parameters?: TStereoDelayVst2Parameters);
    readonly parameterLibrary: {
        enable: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
            };
        };
        inputDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        sync: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                none: number;
                tempo: number;
            };
        };
        lSource: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                off: number;
                left: number;
                right: number;
                "l + r": number;
                "l - r": number;
            };
        };
        lFeedbackPercent: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        lCrossFbPercent: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        lNoteDelay: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                half: number;
                quarter: number;
                eight: number;
                sixteenth: number;
            };
        };
        lNoteOffset: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
        };
        lDelayMs: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        lPan: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
        };
        lLowCutHz: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
            powerFuncB: number;
        };
        lHighCutHz: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
            powerFuncB: number;
        };
        rSource: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                off: number;
                left: number;
                right: number;
                "l + r": number;
                "l - r": number;
            };
        };
        rFeedbackPercent: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        rCrossFbPercent: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        rNoteDelay: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                half: number;
                quarter: number;
                eight: number;
                sixteenth: number;
            };
        };
        rNoteOffset: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
        };
        rDelayMs: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        rPan: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
        };
        rLowCutHz: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
            powerFuncB: number;
        };
        rHighCutHz: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
            powerFuncB: number;
        };
        wetDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        dryDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
    };
    readonly makeAutomation: {
        enable(value?: number | undefined, curve?: number): PluginAutomation;
        inputDb(value?: number | undefined, curve?: number): PluginAutomation;
        sync(value?: number | undefined, curve?: number): PluginAutomation;
        lSource(value?: number | undefined, curve?: number): PluginAutomation;
        lFeedbackPercent(value?: number | undefined, curve?: number): PluginAutomation;
        lCrossFbPercent(value?: number | undefined, curve?: number): PluginAutomation;
        lNoteDelay(value?: number | undefined, curve?: number): PluginAutomation;
        lNoteOffset(value?: number | undefined, curve?: number): PluginAutomation;
        lDelayMs(value?: number | undefined, curve?: number): PluginAutomation;
        lPan(value?: number | undefined, curve?: number): PluginAutomation;
        lLowCutHz(value?: number | undefined, curve?: number): PluginAutomation;
        lHighCutHz(value?: number | undefined, curve?: number): PluginAutomation;
        rSource(value?: number | undefined, curve?: number): PluginAutomation;
        rFeedbackPercent(value?: number | undefined, curve?: number): PluginAutomation;
        rCrossFbPercent(value?: number | undefined, curve?: number): PluginAutomation;
        rNoteDelay(value?: number | undefined, curve?: number): PluginAutomation;
        rNoteOffset(value?: number | undefined, curve?: number): PluginAutomation;
        rDelayMs(value?: number | undefined, curve?: number): PluginAutomation;
        rPan(value?: number | undefined, curve?: number): PluginAutomation;
        rLowCutHz(value?: number | undefined, curve?: number): PluginAutomation;
        rHighCutHz(value?: number | undefined, curve?: number): PluginAutomation;
        wetDb(value?: number | undefined, curve?: number): PluginAutomation;
        dryDb(value?: number | undefined, curve?: number): PluginAutomation;
    };
    static readonly parameterLibrary: {
        enable: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
            };
        };
        inputDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        sync: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                none: number;
                tempo: number;
            };
        };
        lSource: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                off: number;
                left: number;
                right: number;
                "l + r": number;
                "l - r": number;
            };
        };
        lFeedbackPercent: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        lCrossFbPercent: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        lNoteDelay: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                half: number;
                quarter: number;
                eight: number;
                sixteenth: number;
            };
        };
        lNoteOffset: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
        };
        lDelayMs: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        lPan: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
        };
        lLowCutHz: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
            powerFuncB: number;
        };
        lHighCutHz: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
            powerFuncB: number;
        };
        rSource: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                off: number;
                left: number;
                right: number;
                "l + r": number;
                "l - r": number;
            };
        };
        rFeedbackPercent: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        rCrossFbPercent: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        rNoteDelay: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                half: number;
                quarter: number;
                eight: number;
                sixteenth: number;
            };
        };
        rNoteOffset: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
        };
        rDelayMs: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        rPan: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
        };
        rLowCutHz: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
            powerFuncB: number;
        };
        rHighCutHz: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
            powerFuncB: number;
        };
        wetDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        dryDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
    };
    static readonly makeAutomation: {
        enable(value?: number | undefined, curve?: number): PluginAutomation;
        inputDb(value?: number | undefined, curve?: number): PluginAutomation;
        sync(value?: number | undefined, curve?: number): PluginAutomation;
        lSource(value?: number | undefined, curve?: number): PluginAutomation;
        lFeedbackPercent(value?: number | undefined, curve?: number): PluginAutomation;
        lCrossFbPercent(value?: number | undefined, curve?: number): PluginAutomation;
        lNoteDelay(value?: number | undefined, curve?: number): PluginAutomation;
        lNoteOffset(value?: number | undefined, curve?: number): PluginAutomation;
        lDelayMs(value?: number | undefined, curve?: number): PluginAutomation;
        lPan(value?: number | undefined, curve?: number): PluginAutomation;
        lLowCutHz(value?: number | undefined, curve?: number): PluginAutomation;
        lHighCutHz(value?: number | undefined, curve?: number): PluginAutomation;
        rSource(value?: number | undefined, curve?: number): PluginAutomation;
        rFeedbackPercent(value?: number | undefined, curve?: number): PluginAutomation;
        rCrossFbPercent(value?: number | undefined, curve?: number): PluginAutomation;
        rNoteDelay(value?: number | undefined, curve?: number): PluginAutomation;
        rNoteOffset(value?: number | undefined, curve?: number): PluginAutomation;
        rDelayMs(value?: number | undefined, curve?: number): PluginAutomation;
        rPan(value?: number | undefined, curve?: number): PluginAutomation;
        rLowCutHz(value?: number | undefined, curve?: number): PluginAutomation;
        rHighCutHz(value?: number | undefined, curve?: number): PluginAutomation;
        wetDb(value?: number | undefined, curve?: number): PluginAutomation;
        dryDb(value?: number | undefined, curve?: number): PluginAutomation;
    };
}
