import { FluidPlugin } from '../FluidPlugin';
import { PluginAutomation } from '../techniques';
export interface TCompressorVst2Parameters {
    enable?: number;
    mode?: number;
    /** db value from -60 to 0 */
    thresholdDb?: number;
    /** value from 1 to 100 */
    ratio?: number;
    /** ms value from 0.1 to 100 */
    attackMs?: number;
    /** ms value from 0 to 1000 */
    holdMs?: number;
    /** ms value from 1 to 1000 */
    releaseMs?: number;
    /** db value from -20 to 20 */
    inputDb?: number;
    /** db value from -20 to 20 */
    makeUpDb?: number;
    /** db value from 0 to 60 */
    softKneeDb?: number;
    /** ms value from 0 to 10 */
    lookaheadMs?: number;
    limit?: number;
    useSidechainTrigger?: number;
    monitorSidechain?: number;
    softClip?: number;
    /** db value from -60 to 0 */
    softClipThresholdDb?: number;
    peakDetection?: number;
    useSumDetection?: number;
    enableAutoMakeUpGain?: number;
    filter?: number;
    filterType?: number;
    /** hz value from 10 to 20000 */
    freqHz?: number;
    /** value from 0.025 to 40 */
    q?: number;
    /** db value from -30 to 30 */
    gainDb?: number;
}
export declare class TCompressorVst2 extends FluidPlugin {
    readonly parameters: TCompressorVst2Parameters;
    constructor(parameters?: TCompressorVst2Parameters);
    readonly parameterLibrary: {
        enable: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
            };
        };
        mode: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
            };
        };
        thresholdDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        ratio: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            powerFuncB: number;
        };
        attackMs: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        holdMs: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        releaseMs: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        inputDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        makeUpDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        softKneeDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        lookaheadMs: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        limit: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
            };
        };
        useSidechainTrigger: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
            };
        };
        monitorSidechain: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
            };
        };
        softClip: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                off: number;
                on: number;
            };
        };
        softClipThresholdDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        peakDetection: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
            };
        };
        useSumDetection: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
            };
        };
        enableAutoMakeUpGain: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                off: number;
                on: number;
            };
        };
        filter: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                off: number;
                on: number;
            };
        };
        filterType: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
                2: number;
                3: number;
                4: number;
                5: number;
                6: number;
                7: number;
            };
        };
        freqHz: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
            powerFuncB: number;
        };
        q: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            powerFuncB: number;
        };
        gainDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
    };
    readonly makeAutomation: {
        enable(value?: number | undefined, curve?: number): PluginAutomation;
        mode(value?: number | undefined, curve?: number): PluginAutomation;
        thresholdDb(value?: number | undefined, curve?: number): PluginAutomation;
        ratio(value?: number | undefined, curve?: number): PluginAutomation;
        attackMs(value?: number | undefined, curve?: number): PluginAutomation;
        holdMs(value?: number | undefined, curve?: number): PluginAutomation;
        releaseMs(value?: number | undefined, curve?: number): PluginAutomation;
        inputDb(value?: number | undefined, curve?: number): PluginAutomation;
        makeUpDb(value?: number | undefined, curve?: number): PluginAutomation;
        softKneeDb(value?: number | undefined, curve?: number): PluginAutomation;
        lookaheadMs(value?: number | undefined, curve?: number): PluginAutomation;
        limit(value?: number | undefined, curve?: number): PluginAutomation;
        useSidechainTrigger(value?: number | undefined, curve?: number): PluginAutomation;
        monitorSidechain(value?: number | undefined, curve?: number): PluginAutomation;
        softClip(value?: number | undefined, curve?: number): PluginAutomation;
        softClipThresholdDb(value?: number | undefined, curve?: number): PluginAutomation;
        peakDetection(value?: number | undefined, curve?: number): PluginAutomation;
        useSumDetection(value?: number | undefined, curve?: number): PluginAutomation;
        enableAutoMakeUpGain(value?: number | undefined, curve?: number): PluginAutomation;
        filter(value?: number | undefined, curve?: number): PluginAutomation;
        filterType(value?: number | undefined, curve?: number): PluginAutomation;
        freqHz(value?: number | undefined, curve?: number): PluginAutomation;
        q(value?: number | undefined, curve?: number): PluginAutomation;
        gainDb(value?: number | undefined, curve?: number): PluginAutomation;
    };
    static readonly parameterLibrary: {
        enable: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
            };
        };
        mode: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
            };
        };
        thresholdDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        ratio: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            powerFuncB: number;
        };
        attackMs: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        holdMs: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        releaseMs: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        inputDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        makeUpDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        softKneeDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        lookaheadMs: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        limit: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
            };
        };
        useSidechainTrigger: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
            };
        };
        monitorSidechain: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
            };
        };
        softClip: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                off: number;
                on: number;
            };
        };
        softClipThresholdDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
        peakDetection: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
            };
        };
        useSumDetection: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
            };
        };
        enableAutoMakeUpGain: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                off: number;
                on: number;
            };
        };
        filter: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                off: number;
                on: number;
            };
        };
        filterType: {
            name: string;
            index: number;
            isLinear: boolean;
            choices: {
                0: number;
                1: number;
                2: number;
                3: number;
                4: number;
                5: number;
                6: number;
                7: number;
            };
        };
        freqHz: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
            powerFuncB: number;
        };
        q: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            powerFuncB: number;
        };
        gainDb: {
            name: string;
            index: number;
            isLinear: boolean;
            range: [number, number];
            units: string;
        };
    };
    static readonly makeAutomation: {
        enable(value?: number | undefined, curve?: number): PluginAutomation;
        mode(value?: number | undefined, curve?: number): PluginAutomation;
        thresholdDb(value?: number | undefined, curve?: number): PluginAutomation;
        ratio(value?: number | undefined, curve?: number): PluginAutomation;
        attackMs(value?: number | undefined, curve?: number): PluginAutomation;
        holdMs(value?: number | undefined, curve?: number): PluginAutomation;
        releaseMs(value?: number | undefined, curve?: number): PluginAutomation;
        inputDb(value?: number | undefined, curve?: number): PluginAutomation;
        makeUpDb(value?: number | undefined, curve?: number): PluginAutomation;
        softKneeDb(value?: number | undefined, curve?: number): PluginAutomation;
        lookaheadMs(value?: number | undefined, curve?: number): PluginAutomation;
        limit(value?: number | undefined, curve?: number): PluginAutomation;
        useSidechainTrigger(value?: number | undefined, curve?: number): PluginAutomation;
        monitorSidechain(value?: number | undefined, curve?: number): PluginAutomation;
        softClip(value?: number | undefined, curve?: number): PluginAutomation;
        softClipThresholdDb(value?: number | undefined, curve?: number): PluginAutomation;
        peakDetection(value?: number | undefined, curve?: number): PluginAutomation;
        useSumDetection(value?: number | undefined, curve?: number): PluginAutomation;
        enableAutoMakeUpGain(value?: number | undefined, curve?: number): PluginAutomation;
        filter(value?: number | undefined, curve?: number): PluginAutomation;
        filterType(value?: number | undefined, curve?: number): PluginAutomation;
        freqHz(value?: number | undefined, curve?: number): PluginAutomation;
        q(value?: number | undefined, curve?: number): PluginAutomation;
        gainDb(value?: number | undefined, curve?: number): PluginAutomation;
    };
}
