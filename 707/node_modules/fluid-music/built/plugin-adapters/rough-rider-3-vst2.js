"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoughRider3Vst2 = void 0;
const FluidPlugin_1 = require("../FluidPlugin");
const techniques_1 = require("../techniques");
const pluginName = 'RoughRider3';
const pluginType = FluidPlugin_1.PluginType.VST2;
const parameterLibrary = {
    sidechainHighpass: { name: 'SC HPF', index: 0, isLinear: true, range: [20, 250], units: 'hz' },
    inputGainDb: { name: 'Input Lvl', index: 1, isLinear: true, range: [-60, 5], units: 'db' },
    sensitivityDb: { name: 'Sensitivity', index: 2, isLinear: true, range: [-60, 0], units: 'db' },
    ratio: { name: 'Ratio', index: 3, isLinear: false, range: [1, 1000],
        normalize: (ratio) => {
            const a = 0.08;
            const u = Math.log10((1000 - a) / a);
            return Math.log10((ratio + a - 1) / a) / u;
        } },
    attackMs: { name: 'Attack', index: 4, isLinear: true, range: [0, 100], units: 'ms' },
    releaseMs: { name: 'Release', index: 5, isLinear: true, range: [10, 1000], units: 'ms' },
    makeupGainDb: { name: 'Makeup', index: 6, isLinear: true, range: [0, 30], units: 'db' },
    mixPercent: { name: 'Mix', index: 7, isLinear: true, range: [0, 100], units: 'percent' },
    outputLvlDb: { name: 'Output Lvl', index: 8, isLinear: true, range: [-60, 5], units: 'db' },
    externalSidechainEnable: { name: 'SC Active', index: 9, isLinear: false, choices: { "off": 0, "on": 1 } },
    fullBandwidth: { name: 'Full Bandwidth', index: 10, isLinear: false, choices: { "off": 0, "on": 1 } }
};
const makeAutomation = {
    sidechainHighpass(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'sidechainHighpass',
        });
    },
    inputGainDb(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'inputGainDb',
        });
    },
    sensitivityDb(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'sensitivityDb',
        });
    },
    ratio(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'ratio',
        });
    },
    attackMs(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'attackMs',
        });
    },
    releaseMs(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'releaseMs',
        });
    },
    makeupGainDb(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'makeupGainDb',
        });
    },
    mixPercent(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'mixPercent',
        });
    },
    outputLvlDb(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'outputLvlDb',
        });
    },
    externalSidechainEnable(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'externalSidechainEnable',
        });
    },
    fullBandwidth(value, curve = 0) {
        return new techniques_1.PluginAutomation({
            value,
            curve,
            pluginSelector: { pluginName, pluginType },
            paramKey: 'fullBandwidth',
        });
    }
};
class RoughRider3Vst2 extends FluidPlugin_1.FluidPlugin {
    constructor(parameters = {}) {
        super(pluginName, pluginType);
        this.parameters = parameters;
        this.parameterLibrary = parameterLibrary;
        this.makeAutomation = makeAutomation;
    }
}
exports.RoughRider3Vst2 = RoughRider3Vst2;
// Static members
RoughRider3Vst2.parameterLibrary = parameterLibrary;
RoughRider3Vst2.makeAutomation = makeAutomation;
//# sourceMappingURL=rough-rider-3-vst2.js.map