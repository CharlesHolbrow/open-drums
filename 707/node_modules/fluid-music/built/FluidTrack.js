"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FluidTrack = exports.FluidReceive = void 0;
const fluid_interfaces_1 = require("./fluid-interfaces");
const FluidPlugin_1 = require("./FluidPlugin");
class FluidReceive {
    constructor(options) {
        this.gainDb = 0;
        this.tap = fluid_interfaces_1.Tap.postFader;
        this.from = options.from;
        if (typeof options.gainDb === 'number')
            this.gainDb = options.gainDb;
    }
}
exports.FluidReceive = FluidReceive;
class FluidTrack {
    constructor(config) {
        var _a, _b;
        this.scoreConfig = {};
        this.gainDb = 0;
        this.pan = 0;
        this.width = 1;
        this.clips = [];
        this.audioFiles = [];
        this.plugins = [];
        this.receives = [];
        this.automation = {
            gainDb: { points: [] },
            width: { points: [] },
            pan: { points: [] },
        };
        this.unresolvedSends = [];
        this.children = [];
        if (typeof config.name === 'string')
            this.name = config.name;
        else
            throw new Error('Cannot create track without a name');
        if (typeof config.gainDb === 'number')
            this.gainDb = config.gainDb;
        if (typeof config.pan === 'number')
            this.pan = config.pan;
        if (typeof config.width === 'number')
            this.width = config.width;
        if ((_a = config.sends) === null || _a === void 0 ? void 0 : _a.length)
            this.unresolvedSends = config.sends.map(send => send);
        if (config.plugins) {
            for (let plugin of config.plugins)
                if (!(plugin instanceof FluidPlugin_1.FluidPlugin))
                    throw new Error(`plugin was not an instance of FluidPlugin: ${JSON.stringify(plugin)}`);
            this.plugins = config.plugins;
        }
        this.scoreConfig = Object.assign({}, config);
        // As the last step, construct any child tracks
        if ((_b = config.children) === null || _b === void 0 ? void 0 : _b.length) {
            this.children = config.children.map(childConfig => new FluidTrack(childConfig));
        }
    }
}
exports.FluidTrack = FluidTrack;
//# sourceMappingURL=FluidTrack.js.map